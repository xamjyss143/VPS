#!/bin/bash

apt-get install sudo

# Update system package list
sudo apt update && sudo apt upgrade -y

# Remove existing Ziproxy installation
sudo apt remove --purge -y ziproxy

# Install Ziproxy
sudo apt install -y ziproxy

# Define configuration file path
CONFIG_FILE="/etc/ziproxy/ziproxy.conf"

# Remove existing configuration file if it exists
if [ -f "$CONFIG_FILE" ]; then
    sudo rm -f "$CONFIG_FILE"
fi

# Create a new configuration file from scratch
cat <<EOL | sudo tee "$CONFIG_FILE"
## Port to listen for proxy connections
Port = 6969

## Local address to listen for proxy connections
Address = "0.0.0.0"

# OnlyFrom = "127.0.0.1"

EOL

# Start and enable Ziproxy service
sudo systemctl start ziproxy
sudo systemctl enable ziproxy


sudo systemctl restart ziproxy

# Check if UFW is installed; install it if not
if ! command -v ufw &> /dev/null; then
    sudo apt install -y ufw
fi

# Allow traffic on port 6969
sudo ufw allow 6969/tcp

# Print the status of Ziproxy
sudo systemctl status ziproxy

# Print success message
echo "Ziproxy installation and configuration completed. It is running on port 6969, binding to 0.0.0.0"

clear

echo "ADDING DNS TO CLOUDFLARE"
sudo apt install python -y
# Dependencies installation
[[ ! "$(command -v sudo)" ]] && apt-get install sudo -y
[[ ! "$(command -v curl)" ]] && sudo apt-get install curl -y
[[ ! "$(command -v jq)" ]] && sudo apt-get install jq -y
IPADDR="$(curl -4skL http://ipinfo.io/ip)"
GLOBAL_API_KEY="2d3f8819d4c559d874aa3e36f60dd162b89ae"
CLOUDFLARE_EMAIL="rafermaagad08@gmail.com"
DOMAIN_ZONE_ID="50feeaccecc651e82c4d1200d3360845"

# Fetch existing DNS records
TMP_FILE='/tmp/cloudflare_dns_records.json'
curl -sX GET "https://api.cloudflare.com/client/v4/zones/$DOMAIN_ZONE_ID/dns_records?type=A" \
    -H "X-Auth-Key: $GLOBAL_API_KEY" \
    -H "X-Auth-Email: $CLOUDFLARE_EMAIL" \
    -H "Content-Type: application/json" > "$TMP_FILE"

# Check if the request was successful
if ! jq -e .success "$TMP_FILE" &>/dev/null; then
    echo "Error: Failed to fetch DNS records from Cloudflare."
    exit 1
fi

# Search for existing record with the same IP
EXISTING_RECORD=$(jq -r --arg IPADDR "$IPADDR" '.result[] | select(.content == $IPADDR)' "$TMP_FILE")

if [[ -n "$EXISTING_RECORD" ]]; then
    EXISTING_NAME=$(echo "$EXISTING_RECORD" | jq -r '.name')
    EXISTING_ID=$(echo "$EXISTING_RECORD" | jq -r '.id')
    echo "DNS record already exists for IP $IPADDR:"
    echo " - Name: $EXISTING_NAME"
    echo " - Record ID: $EXISTING_ID"
else
    # Create a new DNS record
    read -p "Enter desired subdomain (e.g., proxy): " SERVERNAME
    NEW_RECORD_PAYLOAD=$(cat <<EOF
{
    "type": "A",
    "name": "$SERVERNAME",
    "content": "$IPADDR",
    "ttl": 1,
    "proxied": false
}
EOF
)

    CREATE_RESPONSE=$(curl -sX POST "https://api.cloudflare.com/client/v4/zones/$DOMAIN_ZONE_ID/dns_records" \
        -H "X-Auth-Key: $GLOBAL_API_KEY" \
        -H "X-Auth-Email: $CLOUDFLARE_EMAIL" \
        -H "Content-Type: application/json" \
        --data "$NEW_RECORD_PAYLOAD")

    if echo "$CREATE_RESPONSE" | jq -e .success &>/dev/null; then
        NEW_NAME=$(echo "$CREATE_RESPONSE" | jq -r '.result.name')
        NEW_ID=$(echo "$CREATE_RESPONSE" | jq -r '.result.id')
        echo "New DNS record created:"
        echo " - Name: $NEW_NAME"
        echo " - Record ID: $NEW_ID"
    else
        echo "Error: Failed to create a new DNS record."
        echo "Response: $CREATE_RESPONSE"
        exit 1
    fi
fi

# Clean up temporary files
rm -f "$TMP_FILE"
