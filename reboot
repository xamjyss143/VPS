#!/bin/bash
# Bulk Reboot VPS - Parallel 20 at a Time

MAX_CONCURRENT=20

if [[ -z "$1" ]]; then
  echo "Usage: $0 <input_file>"
  exit 1
fi

INPUT_FILE="$1"
SUCCESS_FILE="${INPUT_FILE%.txt}-success.txt"
ERROR_FILE="${INPUT_FILE%.txt}-error.txt"

GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m'

> "$SUCCESS_FILE"
> "$ERROR_FILE"

COUNT=1

# Function to manage each host
process_host() {
  local COUNT=$1
  local LINE=$2
  local IP_PORT=$(echo "$LINE" | cut -d'@' -f1)
  local USER_PASS=$(echo "$LINE" | cut -d'@' -f2)
  local IP=$(echo "$IP_PORT" | cut -d':' -f1)
  local PORT=$(echo "$IP_PORT" | cut -d':' -f2)
  local USER=$(echo "$USER_PASS" | cut -d':' -f1)
  local PASS=$(echo "$USER_PASS" | cut -d':' -f2)

  /usr/bin/expect <<EOF > /dev/null 2>&1
  set timeout -1
  spawn ssh -o StrictHostKeyChecking=no -p $PORT $USER@$IP "reboot"
  expect {
    "*password:" { send "$PASS\r"; exp_continue }
    eof
  }
EOF

  if [[ $? -eq 0 ]]; then
    echo -e "${GREEN}SUCCESS: [IP: $IP] Rebooted${NC}"
    echo "$COUNT => SUCCESS: [IP: $IP] Rebooted" >> "$SUCCESS_FILE"
  else
    echo -e "${RED}ERROR: [IP: $IP] Failed to reboot${NC}"
    echo "$COUNT => ERROR: [IP: $IP] Failed to reboot" >> "$ERROR_FILE"
  fi
}

# Parallel processing loop
while IFS= read -r line || [[ -n "$line" ]]; do
  while (( $(jobs -rp | wc -l) >= MAX_CONCURRENT )); do
    wait -n
  done

  process_host "$COUNT" "$line" &
  ((COUNT++))
done < "$INPUT_FILE"

# Wait for all remaining jobs
wait

echo "Process completed. Check $SUCCESS_FILE and $ERROR_FILE for details."
